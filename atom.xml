<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ildar Shaynurov's blog]]></title>
  <link href="http://shir.github.com/atom.xml" rel="self"/>
  <link href="http://shir.github.com/"/>
  <updated>2013-02-11T23:37:06+04:00</updated>
  <id>http://shir.github.com/</id>
  <author>
    <name><![CDATA[Ildar Shaynurov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails: Точки и другие спец символы в маршрутах.]]></title>
    <link href="http://shir.github.com/blog/2011/08/02/dots-in-routes/"/>
    <updated>2011-08-02T15:39:00+04:00</updated>
    <id>http://shir.github.com/blog/2011/08/02/dots-in-routes</id>
    <content type="html"><![CDATA[<p>Иногда бывает нужно использовать точки или какие-то другие специальные
символы в маршрутах и параметрах маршрутов. Например, мы хотим реализовать
систему которая бует отдавать файлы только пользователям которые являются
владельцами этих файлов.</p>

<p>Создадим такой маршрут:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;user/:user_id/files/:file_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;user_files#file&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:user_file</span>
</span></code></pre></td></tr></table></div></figure>


<p>И попробуем им воспользоваться:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;Download File&#39;</span><span class="p">,</span> <span class="n">user_file_path</span><span class="p">(</span><span class="s1">&#39;some_cool_file.jpg&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>При выполнении это кода произойдет примено такая ошибка:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActionView</span><span class="p">:</span><span class="ss">:Template</span><span class="o">::</span><span class="no">Error</span> <span class="p">(</span><span class="no">No</span> <span class="n">route</span> <span class="n">matches</span> <span class="p">{</span><span class="ss">:action</span><span class="o">=&gt;</span><span class="s2">&quot;file&quot;</span><span class="p">,</span> <span class="ss">:file_name</span><span class="o">=&gt;</span><span class="s2">&quot;some_cool_file.jpg&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">:user_id</span><span class="o">=&gt;</span><span class="c1">#&lt;User id: 27&gt;, :controller=&gt;&quot;user_files&quot;}):</span>
</span></code></pre></td></tr></table></div></figure>


<p>Это происходит потому что <code>.jpg</code> интерпертируется как формат, а формата .jpg
в этом action не предусмотрено. Для исправления нужно указать что
это расширение часть параметра <code>:file_name</code>. Сделать это можно
путем указания ограничения по регулярному выражение для этого параметра
включающего все символы <code>/.+/</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;user/:user_id/files/:file_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;user_files#file&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:user_file</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:constraints</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:file</span> <span class="o">=&gt;</span> <span class="sr">/.+/</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Учтите что это регулярное выражение включает <em>все</em> символы, и в маршруте
вида <code>/user/1/files/pictures/coolest/some_cool_picture.jpg</code> в параметр <code>:file</code>
будет переданно значение <code>coolest/some_cool_picture.jpg</code>. Если же вы не хотите
интерпретировать <code>/</code> как часть параметра то этот символ надо исключить
из регулярного выражения:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;user/:user_id/files/:file_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;user_files#file&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:user_file</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:constraints</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:file</span> <span class="o">=&gt;</span> <span class="sr">/[^\/]+/</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>В этом случае попытка построения маршурта вида:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;Download File&#39;</span><span class="p">,</span> <span class="n">user_file_path</span><span class="p">(</span><span class="s1">&#39;pictures/coolest/some_cool_picture.jpg&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>будет вызывать ошибку.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Переменные в регулярных выражениях]]></title>
    <link href="http://shir.github.com/blog/2011/08/02/variables-in-regexp/"/>
    <updated>2011-08-02T15:36:00+04:00</updated>
    <id>http://shir.github.com/blog/2011/08/02/variables-in-regexp</id>
    <content type="html"><![CDATA[<p>Бывает что нужно вставить одно регулярное выражение в другое.
Это можно сделать так же как со строкой:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go"> &gt; REGEXP1 = /[A-Za-z0-9\_][A-Za-z0-9\-\_\.]+/</span>
</span><span class='line'><span class="go"> &gt; /^#{REGEXP1}$/</span>
</span><span class='line'><span class="go"> =&gt; /^(?-mix:[A-Za-z0-9\_][A-Za-z0-9\-\_\.]+)$/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Но при такой вставке могут быть проблемы при дальнейшем преобразовании,
например в строку. Сравните:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">&gt; /^#{REGEXP1}$/.to_s</span>
</span><span class='line'><span class="go">=&gt; &quot;(?-mix:^(?-mix:[A-Za-z0-9\\_][A-Za-z0-9\\-\\_\\.]+)$)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>и</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">&gt; /^[A-Za-z0-9\_][A-Za-z0-9\-\_\.]+$/.to_s</span>
</span><span class='line'><span class="go">=&gt; &quot;(?-mix:^[A-Za-z0-9\\_][A-Za-z0-9\\-\\_\\.]+$)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Как видно, в результате выражения различаются. Для того чтоб такого
не присходило можно воспользоваться методом <code>#source</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">&gt; /^#{REGEXP1.source}$/.to_s</span>
</span><span class='line'><span class="go">=&gt; &quot;(?-mix:^[A-Za-z0-9\\_][A-Za-z0-9\\-\\_\\.]+$)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>В этом случае результат получается аналогичный, как если бы мы не использовали
переменную.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: удаление trailing spaces]]></title>
    <link href="http://shir.github.com/blog/2011/08/02/remove-trailling-spaces/"/>
    <updated>2011-08-02T15:31:00+04:00</updated>
    <id>http://shir.github.com/blog/2011/08/02/remove-trailling-spaces</id>
    <content type="html"><![CDATA[<p>Для удаления trailing spaces можно воспользоваться такой командой:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:%s/\s*$//g</span></code></pre></td></tr></table></div></figure>


<p>Так же удобно повесить ее на горячу клавишу:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">ts</span> :%<span class="k">s</span><span class="sr">/\s*$/</span>/<span class="k">g</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: события <tt>before</tt> и <tt>after</tt> для <tt>remote</tt> ссылок.]]></title>
    <link href="http://shir.github.com/blog/2011/08/02/remote-before-events/"/>
    <updated>2011-08-02T15:26:00+04:00</updated>
    <id>http://shir.github.com/blog/2011/08/02/remote-before-events</id>
    <content type="html"><![CDATA[<p>У нас есть ссылка которая делает ajax запрос:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;Cool work&#39;</span><span class="p">,</span> <span class="n">cool_work_path</span><span class="p">,</span> <span class="ss">:remote</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Мы хотим сделать какую-то обработку перед отправление запрос и после его выполнения.
Для этого в пакете jquery-rails предусмотрены следующие события:</p>

<ul>
<li><code>ajax:before</code> - Вызывается в самом начале обработки запроса.</li>
<li><code>ajax:beforeSend</code> - Вызывается непосредственно перед отправкой запроса. Если возвращается false
 то выполнение запроса будет остановлено.</li>
<li><code>ajax:success</code> - Вызывается непосредственно после выполнения запроса если он был выполнен успешно.</li>
<li><code>ajax:complete</code> - Вызывается после выполнения запроса независимо от статуса.</li>
<li><code>ajax:error</code> - Вызывается если произошла ошибка.</li>
</ul>


<p>Вернемся к нашей ссылке. Добавим к ней аттрибут <code>id</code> чтоб было легче на нее ссылаться.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;Cool work&#39;</span><span class="p">,</span> <span class="n">cool_work_path</span><span class="p">,</span> <span class="ss">:remote</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s1">&#39;cool_link&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>И в application.js пишем обработчик для событий.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#cool_link&quot;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s2">&quot;ajax:before&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;Processing...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#cool_link&quot;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s2">&quot;ajax:complete&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;Cool work&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Log return value]]></title>
    <link href="http://shir.github.com/blog/2011/08/02/log-return-value/"/>
    <updated>2011-08-02T14:55:00+04:00</updated>
    <id>http://shir.github.com/blog/2011/08/02/log-return-value</id>
    <content type="html"><![CDATA[<p>Если вам нужно вывести в лог возврщаемое из функции значение то можно
воспользоваться методом <a href="http://apidock.com/ruby/Object/tap">tap()</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_function</span>
</span><span class='line'>  <span class="n">complex_calculation</span><span class="o">.</span><span class="n">tap</span><span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;returnd value = </span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
